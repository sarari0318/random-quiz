[{"/random-quiz/frontend/random-quiz/src/index.js":"1","/random-quiz/frontend/random-quiz/src/serviceWorker.js":"2","/random-quiz/frontend/random-quiz/src/App.js":"3","/random-quiz/frontend/random-quiz/src/app/store.js":"4","/random-quiz/frontend/random-quiz/src/components/Main.js":"5","/random-quiz/frontend/random-quiz/src/context/ApiContext.js":"6","/random-quiz/frontend/random-quiz/src/components/Login.js":"7","/random-quiz/frontend/random-quiz/src/components/actionTypes.js":"8","/random-quiz/frontend/random-quiz/src/components/QuizTableRow.js":"9","/random-quiz/frontend/random-quiz/src/components/QuizTable.js":"10"},{"size":1419,"mtime":1620825661936,"results":"11","hashOfConfig":"12"},{"size":5141,"mtime":1612254181222,"results":"13","hashOfConfig":"12"},{"size":170,"mtime":1613280980463,"results":"14","hashOfConfig":"12"},{"size":118,"mtime":1612786726345,"results":"15","hashOfConfig":"16"},{"size":4051,"mtime":1616379149951,"results":"17","hashOfConfig":"12"},{"size":9844,"mtime":1617112698672,"results":"18","hashOfConfig":"12"},{"size":8001,"mtime":1612493097447,"results":"19","hashOfConfig":"12"},{"size":215,"mtime":1613703605605,"results":"20","hashOfConfig":"12"},{"size":4700,"mtime":1617612353555,"results":"21","hashOfConfig":"12"},{"size":3450,"mtime":1620822266048,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14wnios",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"97i3aa",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"/random-quiz/frontend/random-quiz/src/index.js",[],"/random-quiz/frontend/random-quiz/src/serviceWorker.js",[],"/random-quiz/frontend/random-quiz/src/App.js",[],"/random-quiz/frontend/random-quiz/src/app/store.js",[],["47","48"],"/random-quiz/frontend/random-quiz/src/components/Main.js",[],"/random-quiz/frontend/random-quiz/src/context/ApiContext.js",["49","50"],"import React, { createContext, useState, useEffect } from 'react';\nimport { withCookies } from 'react-cookie';\nimport axios from 'axios';\nexport const ApiContext = createContext()\n\nconst ApiContextProvider = (props) => {\n\n    const token = props.cookies.get('current-token')\n    // Youtubeの講座のメモ、setSelectedVideoを参考に！\n    const [selectedQuiz, setSelectedQuiz] = useState([])\n    const [quizzes, setQuizzes] = useState([])\n    const [quizTitle, setQuizTitle] = useState(\"\")\n    const [quizUrl, setQuizUrl] = useState(\"\")\n    const [quizMemo, setQuizMemo] = useState(\"\")\n    const [isSolved, setIsSolved] = useState(false)\n    const [isError, setIsError] = useState(false)\n    const [errorMessage, setErrorMessage] = useState(\"\")\n\n    useEffect(() => {\n        const getUnsolvedQuizzes = async() => {\n            try {\n                const resquiz = await axios.get('http://localhost:8000/api/unsolved/', {\n                    headers: {\n                        'Authorization': `Token ${token}`\n                    }\n                })\n                setQuizzes(resquiz.data)\n            }\n            catch {\n                console.log('error')\n            }\n        }\n\n        const getSolvedQuizzes = async() => {\n            try {\n                const resquiz = await axios.get('http://localhost:8000/api/solved/', {\n                    headers: {\n                        'Authorization': `Token ${token}`\n                    }\n                })\n                setQuizzes(resquiz.data)\n            }\n            catch {\n                console.log('error')\n            }\n        }\n\n        isSolved ? getSolvedQuizzes() : getUnsolvedQuizzes()\n\n    }   , [token, isSolved, quizzes])\n\n    const createQuiz = async() => {\n        const createData = new FormData();\n        // 空欄のデータを保存！(空欄のデータを作り、そこに内容を加えて保存していくイメージ)\n        // つまり、updateしながら内容を記入していく！\n        \n        createData.append('quizTitle', quizTitle)\n        createData.append('quizUrl', quizUrl)\n        createData.append('quizMemo', quizMemo)\n\n        try{\n            const res = await axios.post('http://localhost:8000/api/unsolved/', createData, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Token ${token}`\n                }\n            })\n            \n            setQuizzes([...quizzes, res.data])\n        }\n        catch {\n            console.log('error')\n        }\n    }\n\n    const updateUnsolvedQuiz = async() => {\n        const updateData = new FormData()\n        // ここのtitle, url, memoといったStateは、Tableのところで書く！\n        // setTitle(event.target.value) みたいなやつ！\n        updateData.append('quizTitle', quizTitle)\n        updateData.append('quizUrl', quizUrl)\n        updateData.append('quizMemo', quizMemo)\n        try {\n            const res = await axios.patch(`http://localhost:8000/api/unsolved/${selectedQuiz.id}/`, updateData, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Token ${token}`\n                }\n            })\n            setQuizzes(\n                quizzes.map((quiz) => (quiz.id === selectedQuiz.id ? res.data : quiz))\n            );\n            setQuizTitle('')\n            setQuizUrl('')\n            setQuizMemo('')\n            setSelectedQuiz([])          \n        }\n        catch(error) {\n            const displayErrorMessage = error.response.request.responseText;\n    \n            setIsError(true)\n            setErrorMessage(displayErrorMessage)\n        }\n    }\n\n    const updateSolvedQuiz = async() => {\n        const updateData = new FormData()\n        // ここのtitle, url, memoといったStateは、Tableのところで書く！\n        // setTitle(event.target.value) みたいなやつ！\n        updateData.append('quizTitle', quizTitle)\n        updateData.append('quizUrl', quizUrl)\n        updateData.append('quizMemo', quizMemo)\n        try {\n            const res = await axios.patch(`http://localhost:8000/api/solved/${selectedQuiz.id}/`, updateData, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Token ${token}`\n                }\n            })\n            setQuizzes(\n                quizzes.map((quiz) => (quiz.id === selectedQuiz.id ? res.data : quiz))\n            );\n            setQuizTitle('')\n            setQuizUrl('')\n            setQuizMemo('')\n            setSelectedQuiz([])\n        }\n        catch(error) {\n            const displayErrorMessage = error.response.request.responseText;\n    \n            setIsError(true)\n            setErrorMessage(displayErrorMessage)\n        }\n    }\n\n    const switchUnsolvedToSolved = async(selectedQuiz) => {\n        const updateData = new FormData()\n        updateData.append('is_solved', true)\n    \n        try {\n            const res = await axios.patch(`http://localhost:8000/api/unsolved/${selectedQuiz.id}/`, updateData, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Token ${token}`\n                }\n            })\n            setQuizzes(\n                quizzes.map((quiz) => (quiz.id === selectedQuiz.id ? res.data : quiz))\n            );\n\n            setSelectedQuiz([])\n        }\n        catch {\n            console.log('error')\n        }\n    }\n\n    const switchSolvedToUnsolved = async(selectedQuiz) => {\n        const updateData = new FormData()\n        updateData.append('is_solved', false)\n    \n        try {\n            const res = await axios.patch(`http://localhost:8000/api/solved/${selectedQuiz.id}/`, updateData, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Token ${token}`\n                }\n            })\n            setQuizzes(\n                quizzes.map((quiz) => (quiz.id === selectedQuiz.id ? res.data : quiz))\n            );\n\n            setSelectedQuiz([])\n        }\n        catch {\n            console.log('error')\n        }\n    }\n\n    const deleteQuiz = async(selectedQuiz) => {\n        try {\n            isSolved ?\n    \n                await axios.delete(`http://localhost:8000/api/solved/${selectedQuiz.id}/`, {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Token ${token}`\n                    }\n                })\n            :\n                await axios.delete(`http://localhost:8000/api/unsolved/${selectedQuiz.id}/`, {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Token ${token}`\n                    }\n                })\n            setQuizzes(quizzes.filter(quiz => quiz.id !== selectedQuiz.id))\n            setSelectedQuiz([])  \n        }\n        catch {\n            console.log('error')\n        }\n    }\n\n    const getRandomUnsolvedQuiz = async() => {\n        try {\n            const resquiz = await axios.get('http://localhost:8000/api/unsolved/', {\n                headers: {\n                    'Authorization': `Token ${token}`\n                }\n            })\n\n            var index = 0\n            var quiz_window;\n\n            // solved のデータを格納したres のデータを１つずつ取り出し、そのindexを１つずつ配列indiceに追加！\n            if (resquiz.data){\n                index = Math.floor(Math.random() * resquiz.data.length)\n                // ランダムに選んできたindexに対応するquiz_urlのリンク先を新しいタブで開く\n                quiz_window = window.open(resquiz.data[index].quizUrl, 'random_quiz')\n            }else{\n                console.log('error1')\n            }      \n        }\n        catch {\n            console.log('error')\n        }\n    }\n\n    const getRandomSolvedQuiz = async() => {\n        try {\n            const resquiz = await axios.get('http://localhost:8000/api/solved/', {\n                headers: {\n                    'Authorization': `Token ${token}`\n                }\n            })\n\n            var index = 0\n            var quiz_window;\n\n            // solved のデータを格納したres のデータを１つずつ取り出し、そのindexを１つずつ配列indiceに追加！\n            if (resquiz.data){\n                index = Math.floor(Math.random() * resquiz.data.length)\n                // ランダムに選んできたindexに対応するquiz_urlのリンク先を新しいタブで開く\n                quiz_window = window.open(resquiz.data[index].quizUrl, 'random_quiz')\n            }else{\n                console.log('error1')\n            }      \n        }\n        catch {\n            console.log('error')\n        }\n    }\n\n    return (\n        <ApiContext.Provider\n            value={{\n                selectedQuiz,\n                isSolved,\n                isError,\n                errorMessage,\n                quizzes,\n                quizTitle,\n                quizUrl,\n                quizMemo,\n                setSelectedQuiz,\n                setIsSolved,\n                setIsError,\n                setErrorMessage,\n                setQuizzes,\n                setQuizTitle,\n                setQuizUrl,\n                setQuizMemo,\n                createQuiz,\n                updateSolvedQuiz,\n                updateUnsolvedQuiz,\n                switchUnsolvedToSolved,\n                switchSolvedToUnsolved,\n                deleteQuiz,\n                getRandomUnsolvedQuiz,\n                getRandomSolvedQuiz,\n            }}\n        >\n            {props.children}\n        </ApiContext.Provider>\n    )\n}\n\nexport default withCookies(ApiContextProvider)\n","/random-quiz/frontend/random-quiz/src/components/Login.js",[],"/random-quiz/frontend/random-quiz/src/components/actionTypes.js",[],"/random-quiz/frontend/random-quiz/src/components/QuizTableRow.js",["51"],"import React, { useState, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Check from '@material-ui/icons/Check';\nimport Button from '@material-ui/core/Button';\nimport Delete from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TextField from '@material-ui/core/TextField';\nimport { ApiContext } from '../context/ApiContext';\n\nconst QuizTableRow = ({ quiz }) => {\n    const {\n        quizTitle, quizMemo, quizUrl, isSolved,\n        setSelectedQuiz, setQuizTitle, setQuizMemo, setQuizUrl,\n        updateSolvedQuiz, updateUnsolvedQuiz, deleteQuiz, \n        switchUnsolvedToSolved, switchSolvedToUnsolved,\n    } = useContext(ApiContext);\n\n    const [isEditable, setEditable] = useState(false)\n    const handleStartEdit = () => {\n        setEditable(true)\n        setSelectedQuiz(quiz)\n        setQuizTitle(quiz.quizTitle)\n        setQuizMemo(quiz.quizMemo)\n        setQuizUrl(quiz.quizUrl)\n    }\n    const handleFinishEdit = () => {\n        setEditable(false)\n        // ApiContext.js のやつ！\n        isSolved ?\n        updateSolvedQuiz():\n        updateUnsolvedQuiz()\n    }\n    const handleDelete = () => {\n        setSelectedQuiz(quiz)\n        deleteQuiz(quiz)\n    }\n    const handleChangeIsSolved = () => {\n        setSelectedQuiz(quiz)\n        isSolved ?\n        switchSolvedToUnsolved(quiz)\n        :\n        switchUnsolvedToSolved(quiz)\n    }\n\n    return (\n        <div>\n            \n            <TableRow>\n\n                <TableCell style={{minWidth: 100, maxWidth: 100}} align=\"left\">\n                    { isEditable ?\n                        <Button onClick={() => handleFinishEdit()}> <Check /></Button>\n                    :\n                        <Button onClick={() => handleStartEdit()}> <EditIcon /> </Button>\n                    }\n                    <Button onClick={() => handleDelete()}> <Delete /> </Button>\n                </TableCell>\n                \n\n                { isEditable ? \n                    // もし、isEditable===Trueであれば、\n                    (\n                    <TableCell style={{minWidth: 200, maxWidth: 200}} align=\"left\">\n                        <TextField\n                            type='text'\n                            value={quizTitle}\n                            onChange={(event) => {\n                                setQuizTitle(event.target.value);\n                            }}\n                        />\n                    </TableCell>\n                    ) : (\n                    <TableCell style={{minWidth: 200, maxWidth: 200}} align=\"left\">\n                        { quiz.quizTitle }\n                    </TableCell>\n                    )\n                }\n                { isEditable ? \n                    (\n                    <TableCell style={{minWidth: 450, maxWidth: 450}} align=\"left\">\n                        <TextField\n                            type='text'\n                            value={quizMemo}\n                            onChange={(event) => {\n                                setQuizMemo(event.target.value)\n                            }}\n                        />\n                    </TableCell>\n                    ) : (\n                    <TableCell style={{minWidth: 450, maxWidth: 450}} align=\"left\">\n                        { quiz.quizMemo }\n                    </TableCell>\n                    )\n                }\n                { isEditable ? \n                    (\n                    <TableCell style={{minWidth: 250, maxWidth: 250}} align=\"left\">\n                        <TextField\n                        type='url'\n                        value={quizUrl}\n                        onChange={(event) => {\n                            setQuizUrl(event.target.value)\n                        }}\n                        />\n                    </TableCell>\n                    ) : (\n                    <TableCell style={{minWidth: 250, maxWidth: 250}} align=\"left\">\n                        { quiz.quizUrl }\n                    </TableCell>\n                    )\n                }\n\n                <TableCell style={{minWidth: 100, maxWidth: 100}} align='left'>\n                    { isSolved ?\n                        <Button style={{color: 'orange', fontWeight: 'bold'}} onClick={handleChangeIsSolved}>Not Sure</Button>\n                        :\n                        <Button style={{color: \"orange\", fontWeight: 'bold'}} onClick={handleChangeIsSolved}>Perfect!!</Button>\n                    }\n                </TableCell>  \n\n            </TableRow>\n\n        </div>\n    )\n}\n\nexport default QuizTableRow\n\n\n","/random-quiz/frontend/random-quiz/src/components/QuizTable.js",["52"],"import React, { useContext } from 'react';\nimport { ApiContext } from '../context/ApiContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport QuizTableRow from './QuizTableRow';\nimport Add from '@material-ui/icons/Add';\nimport Button from '@material-ui/core/Button';\nimport { useAlert } from 'react-alert';\n\nconst useStyles = makeStyles({\n    table: {\n      minWidth: 650,\n    },\n  });\n\nconst QuizTable = () => {\n    const classes = useStyles();\n    const alert = useAlert();\n\n    const { quizzes, isSolved, isError, errorMessage, setIsError, createQuiz, getRandomUnsolvedQuiz, getRandomSolvedQuiz} = useContext(ApiContext);\n    const tableTitle = isSolved  ? \"Achived Tasks\" : \"Challenge Tasks\"\n    const listOfQuizzes = quizzes.map((quiz) => (\n        <QuizTableRow key={quiz.id} quiz={quiz} />\n    ));\n\n    const columns = [\n        { id: 'actions', label: 'Actions', minWidth: 100, maxWidth: 100},\n        { id: 'quizTitle', label: 'Title', minWidth: 200, maxWidth: 200},\n        { id: 'quizMemo', label: 'Memo', minWidth: 450, maxWidth: 450},\n        { id: 'quizUrl', label: 'URL', minWidth: 250, maxWidth: 250},\n    ]\n\n    const handleDisplayErrorMessage = () => {\n        alert.error(errorMessage)\n        setIsError(false)\n    }\n\n    return (\n        <div>\n            { isSolved ?\n                <Button style={{color: 'orange', fontWeight: 'bold'}} onClick={getRandomSolvedQuiz}>Push!!</Button>\n                    :\n                <Button style={{color: 'orange', fontWeight: 'bold'}} onClick={getRandomUnsolvedQuiz}>Push!!</Button>\n            }   \n            <TableContainer component={Paper}> \n                    <Table  title={tableTitle} aria-label='simple table'>\n                        { isError &&\n                        handleDisplayErrorMessage()\n                        }\n                        <TableHead>\n                            <TableRow>\n                                {columns.map((column) => (\n                                    <TableCell\n                                        key={column.id}\n                                        style={{ minWidth: column.minWidth, maxWidth: column.maxWidth }}\n                                        align=\"left\"\n                                    >\n                                        {column.label}\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n\n                        <TableBody>\n                            {listOfQuizzes}\n                        </TableBody>\n                    </Table>\n            </TableContainer>\n            { !isSolved &&\n                <button className='add' onClick={createQuiz}>\n\n                          {/* ここのボタンの装飾の設定(色など)は、App.cssでできる！\n                          udemy.com/course/sns-react-hooks-django-restframework-api-web/learn/lecture/20030122?start=1015#notes */}\n                    <Add />\n                </button>\n            }\n        </div>\n    )\n}\n\nexport default QuizTable\n",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":220,"column":17,"nodeType":"59","messageId":"60","endLine":220,"endColumn":28},{"ruleId":"57","severity":1,"message":"58","line":245,"column":17,"nodeType":"59","messageId":"60","endLine":245,"endColumn":28},{"ruleId":"57","severity":1,"message":"61","line":2,"column":10,"nodeType":"59","messageId":"60","endLine":2,"endColumn":20},{"ruleId":"57","severity":1,"message":"62","line":23,"column":11,"nodeType":"59","messageId":"60","endLine":23,"endColumn":18},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'quiz_window' is assigned a value but never used.","Identifier","unusedVar","'makeStyles' is defined but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]